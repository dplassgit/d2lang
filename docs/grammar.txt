statements -> stmt stmt*

stmt -> print expr | variable = expr

expr -> term (+- term)*

term -> atom (*/ atom)*

atom -> int 
	| variable 
	| '(' expr ')'


node classes are:

abstract statement node
abstract atom node

print node extends statement node
assignment node extends statement node
binop node 
int node extends atomnode
varaccess node extends atomnode

coocoocool this works.

Full expr (does not include ^ [exponent])

expr -> booland (| booland)*

booland -> compare (& compare)*

compare -> additive (relop additive)*
relop -> == != > < <= >=

additive -> muldiv (+- muldiv)*

muldiv -> unary (*/% unary)*

unary ->  atom | !-+ atom

atom -> '(' expr ') | var | intconst | charconst | stringconst | boolconst | floatconst

See https://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html for Java reference
